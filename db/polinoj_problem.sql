create table problem
(
    id          bigint auto_increment
        primary key,
    description text             not null,
    hint        varchar(255)     null,
    input       text             null,
    memory      bigint           null,
    output      text             not null,
    source      varchar(255)     not null,
    time        bigint           null,
    title       varchar(50)      not null,
    author      varchar(50)      null,
    source_id   varchar(50)      null,
    ac_count    bigint default 0 null,
    all_count   bigint default 0 null,
    constraint problem_source_id_source_uindex
        unique (source_id, source)
);

INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (14, 'The doggie found a bone in an ancient maze, which fascinated him a lot. However, when he picked it up, the maze began to shake, and the doggie could feel the ground sinking. He realized that the bone was a trap, and he tried desperately to get out of this maze.
The maze was a rectangle with sizes N by M. There was a door in the maze. At the beginning, the door was closed and it would open at the T-th second for a short period of time (less than 1 second). Therefore the doggie had to arrive at the door on exactly the T-th second. In every second, he could move one block to one of the upper, lower, left and right neighboring blocks. Once he entered a block, the ground of this block would start to sink and disappear in the next second. He could not stay at one block for more than one second, nor could he move into a visited block. Can the poor doggie survive? Please help him.', null, 'The input consists of multiple test cases. The first line of each test case contains three integers N, M, and T (1 < N, M < 7; 0 < T < 50), which denote the sizes of the maze and the time at which the door will open, respectively. The next N lines give the maze layout, with each line containing M characters. A character is one of the following:
''X'': a block of wall, which the doggie cannot enter;
''S'': the start point of the doggie;
''D'': the Door; or
''.'': an empty block.
The input is terminated with three 0''s. This test case is not to be processed.', null, 'For each test case, print in one line "YES" if the doggie can survive, or "NO" otherwise.', 'hdu', null, 'Tempter of the Bone', 'ZHANG, Zheng', '1010', 1, 2);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (15, 'You, the leader of Starship Troopers, are sent to destroy a base of the bugs. The base is built underground. It is actually a huge cavern, which consists of many rooms connected with tunnels. Each room is occupied by some bugs, and their brains hide in some of the rooms. Scientists have just developed a new weapon and want to experiment it on some brains. Your task is to destroy the whole base, and capture as many brains as possible.
To kill all the bugs is always easier than to capture their brains. A map is drawn for you, with all the rooms marked by the amount of bugs inside, and the possibility of containing a brain. The cavern''s structure is like a tree in such a way that there is one unique path leading to each room from the entrance. To finish the battle as soon as possible, you do not want to wait for the troopers to clear a room before advancing to the next one, instead you have to leave some troopers at each room passed to fight all the bugs inside. The troopers never re-enter a room where they have visited before.
A starship trooper can fight against 20 bugs. Since you do not have enough troopers, you can only take some of the rooms and let the nerve gas do the rest of the job. At the mean time, you should maximize the possibility of capturing a brain. To simplify the problem, just maximize the sum of all the possibilities of containing brains for the taken rooms. Making such a plan is a difficult job. You need the help of a computer.', null, 'The input contains several test cases. The first line of each test case contains two integers N (0 < N <= 100) and M (0 <= M <= 100), which are the number of rooms in the cavern and the number of starship troopers you have, respectively. The following N lines give the description of the rooms. Each line contains two non-negative integers -- the amount of bugs inside and the possibility of containing a brain, respectively. The next N - 1 lines give the description of tunnels. Each tunnel is described by two integers, which are the indices of the two rooms it connects. Rooms are numbered from 1 and room 1 is the entrance to the cavern.
The last test case is followed by two -1''s.', null, 'For each test case, print on a single line the maximum sum of all the possibilities of containing brains for the taken rooms.', 'hdu', null, 'Starship Troopers', 'XU, Chuan', '1011', 3, 4);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (16, 'A simple mathematical formula for e is
![]()
where n is allowed to go to infinity. This can actually yield very accurate approximations of e using relatively small values of n.', null, null, null, 'Output the approximations of e generated by the above formula for the values of n from 0 to 9. The beginning of your output should appear similar to that shown below.', 'hdu', null, 'u Calculate e', null, '1012', 5, 6);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (17, 'Calculate A + B.', null, 'Each line will contain two integers A and B. Process to end of file.', null, 'For each case, output A + B in one line.', 'hdu', null, 'A + B Problem', 'HDOJ', '1000', 7, 8);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (22, 'Hey, welcome to HDOJ(Hangzhou Dianzi University Online Judge).
In this problem, your task is to calculate SUM(n) = 1 + 2 + 3 + ... + n.', null, 'The input will consist of a series of integers n, one integer per line.', null, 'For each case, output SUM(n) in one line, followed by a blank line. You may assume the result will be in the range of 32-bit signed integer.', 'hdu', null, 'Sum Problem', 'DOOM III', '1001', 1, 2);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (24, 'FatMouse prepared M pounds of cat food, ready to trade with the cats guarding the warehouse containing his favorite food, JavaBean.
The warehouse has N rooms. The i-th room contains J[i] pounds of JavaBeans and requires F[i] pounds of cat food. FatMouse does not have to trade for all the JavaBeans in the room, instead, he may get J[i]/* a% pounds of JavaBeans if he pays F[i]/* a% pounds of cat food. Here a is a real number. Now he is assigning this homework to you: tell him the maximum amount of JavaBeans he can obtain.', null, 'The input consists of multiple test cases. Each test case begins with a line containing two non-negative integers M and N. Then N lines follow, each contains two non-negative integers J[i] and F[i] respectively. The last test case is followed by two -1''s. All integers are not greater than 1000.', null, 'For each test case, print in a single line a real number accurate up to 3 decimal places, which is the maximum amount of JavaBeans that FatMouse can obtain.', 'hdu', null, 'FatMouse'' Trade', 'CHEN, Yue', '1009', 1, 2);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (27, 'Suppose that we have a square city with straight streets. A map of a city is a square board with n rows and n columns, each representing a street or a piece of wall.
A blockhouse is a small castle that has four openings through which to shoot. The four openings are facing North, East, South, and West, respectively. There will be one machine gun shooting through each opening.
Here we assume that a bullet is so powerful that it can run across any distance and destroy a blockhouse on its way. On the other hand, a wall is so strongly built that can stop the bullets.
The goal is to place as many blockhouses in a city as possible so that no two can destroy each other. A configuration of blockhouses is legal provided that no two blockhouses are on the same horizontal row or vertical column in a map unless there is at least one wall separating them. In this problem we will consider small square cities (at most 4x4) that contain walls through which bullets cannot run through.
The following image shows five pictures of the same board. The first picture is the empty board, the second and third pictures show legal configurations, and the fourth and fifth pictures show illegal configurations. For this board, the maximum number of blockhouses in a legal configuration is 5; the second picture shows one way to do it, but there are several other ways.
![]()
Your task is to write a program that, given a description of a map, calculates the maximum number of blockhouses that can be placed in the city in a legal configuration.', null, 'The input file contains one or more map descriptions, followed by a line containing the number 0 that signals the end of the file. Each map description begins with a line containing a positive integer n that is the size of the city; n will be at most 4. The next n lines each describe one row of the map, with a ''.'' indicating an open space and an uppercase ''X'' indicating a wall. There are no spaces in the input file.', null, 'For each test case, output one line containing the maximum number of blockhouses that can be placed in the city in a legal configuration.', 'hdu', null, 'Fire Net', null, '1045', 5, 6);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (28, 'The three hands of the clock are rotating every second and meeting each other many times everyday. Finally, they get bored of this and each of them would like to stay away from the other two. A hand is happy if it is at least D degrees from any of the rest. You are to calculate how much time in a day that all the hands are happy.', null, 'The input contains many test cases. Each of them has a single line with a real number D between 0 and 120, inclusively. The input is terminated with a D of -1.', null, 'For each D, print in a single line the percentage of time in a day that all of the hands are happy, accurate up to 3 decimal places.', 'hdu', null, 'Tick and Tick', 'PAN, Minghao', '1006', 7, 8);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (29, 'I have a very simple problem for you. Given two integers A and B, your job is to calculate the Sum of A + B.', null, 'The first line of the input contains an integer T(1<=T<=20) which means the number of test cases. Then T lines follow, each line consists of two positive integers, A and B. Notice that the integers are very large, that means you should not process them by using 32-bit integer. You may assume the length of each integer will not exceed 1000.', null, 'For each test case, you should output two lines. The first line is "Case /#:", /# means the number of the test case. The second line is the an equation "A + B = Sum", Sum means the result of A + B. Note there are some spaces int the equation. Output a blank line between two test cases.', 'hdu', null, 'A + B Problem II', 'Ignatius.L', '1002', 1, 2);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (33, 'Have you ever played quoit in a playground? Quoit is a game in which flat rings are pitched at some toys, with all the toys encircled awarded.
In the field of Cyberground, the position of each toy is fixed, and the ring is carefully designed so it can only encircle one toy at a time. On the other hand, to make the game look more attractive, the ring is designed to have the largest radius. Given a configuration of the field, you are supposed to find the radius of such a ring.
Assume that all the toys are points on a plane. A point is encircled by the ring if the distance between the point and the center of the ring is strictly less than the radius of the ring. If two toys are placed at the same point, the radius of the ring is considered to be 0.', null, 'The input consists of several test cases. For each case, the first line contains an integer N (2 <= N <= 100,000), the total number of toys in the field. Then N lines follow, each contains a pair of (x, y) which are the coordinates of a toy. The input is terminated by N = 0.', null, 'For each test case, print in one line the radius of the ring required by the Cyberground manager, accurate up to 2 decimal places.', 'hdu', null, 'Quoit Design', 'CHEN, Yue', '1007', 1, 2);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (37, 'Contest time again! How excited it is to see balloons floating around. But to tell you a secret, the judges'' favorite time is guessing the most popular problem. When the contest is over, they will count the balloons of each color and find the result.
This year, they decide to leave this lovely job to you.', null, 'Input contains multiple test cases. Each test case starts with a number N (0 < N <= 1000) -- the total number of balloons distributed. The next N lines contain one color each. The color of a balloon is a string of up to 15 lower-case letters.
A test case with N = 0 terminates the input and this test case is not to be processed.', null, 'For each case, print the color of balloon for the most popular problem on a single line. It is guaranteed that there is a unique solution for each test case.', 'hdu', null, 'Let the Balloon Rise', 'WU, Jiazhi', '1004', 5, 6);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (44, 'A number sequence is defined as follows:
f(1) = 1, f(2) = 1, f(n) = (A /* f(n - 1) + B /* f(n - 2)) mod 7.
Given A, B, and n, you are to calculate the value of f(n).', null, 'The input consists of multiple test cases. Each test case contains 3 integers A, B and n on a single line (1 <= A, B <= 1000, 1 <= n <= 100,000,000). Three zeros signal the end of input and this test case is not to be processed.', null, 'For each test case, print the value of f(n) on a single line.', 'hdu', null, 'Number Sequence', 'CHEN, Shunbao', '1005', 3, 4);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (49, 'Given a sequence a[1],a[2],a[3]......a[n], your job is to calculate the max sum of a sub-sequence. For example, given (6,-1,5,4,-7), the max sum in this sequence is 6 + (-1) + 5 + 4 = 14.', null, 'The first line of the input contains an integer T(1<=T<=20) which means the number of test cases. Then T lines follow, each line starts with a number N(1<=N<=100000), then N integers followed(all the integers are between -1000 and 1000).', null, 'For each test case, you should output two lines. The first line is "Case /#:", /# means the number of the test case. The second line contains three integers, the Max Sum in the sequence, the start position of the sub-sequence, the end position of the sub-sequence. If there are more than one result, output the first one. Output a blank line between two cases.', 'hdu', null, 'Max Sum', 'Ignatius.L', '1003', 1, 2);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (68, 'The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.
For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.', null, 'There are multiple test cases. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100. A test case with N = 0 denotes the end of input. This test case is not to be processed.', null, 'Print the total time on a single line for each test case.', 'hdu', null, 'Elevator', 'ZHENG, Jianqiang', '1008', 0, 0);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (75, 'A+B', 'no hint', 'A B', 209, 'A+B', 'polinoj', 10, 'A+B problem In PolinOJ ', null, null, 0, 0);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (76, 'The least common multiple (LCM) of a set of positive integers is the smallest positive integer which is divisible by all the numbers in the set. For example, the LCM of 5, 7 and 15 is 105.', null, 'Input will consist of multiple problem instances. The first line of the input will contain a single integer indicating the number of problem instances. Each instance will consist of a single line of the form m n1 n2 n3 ... nm where m is the number of integers in the set and n1 ... nm are the integers. All integers will be positive and lie within the range of a 32-bit integer.', null, 'For each problem instance, output a single line containing the corresponding LCM. All results will lie in the range of a 32-bit integer.', 'hdu', null, 'Least Common Multiple', null, '1019', 0, 0);
INSERT INTO polinoj.problem (id, description, hint, input, memory, output, source, time, title, author, source_id, ac_count, all_count) VALUES (77, '斐波那契数列是自然界中常出现的数列，很多植物的花瓣都呈现斐波那契数列的变化。
斐波那契数列以递归的形式给出，当$i\\gt2$时，有$a_i=a_{i-1}+a_{i-2}$，当$i\\le2$时，$a_i=1$
现在你需要计算斐波那契数列的第$i$项
', '- 保证$i\\lt10^8$
- 由于答案非常大，你只需要输出数列在十进制下的最后的4位即可', '每个测试数据只有一个输入，输入一个整数$i$', 512, '你需要输出斐波那契数列的第i项', 'polinoj', 1, 'wsx的斐波那契数列', null, null, 0, 0);